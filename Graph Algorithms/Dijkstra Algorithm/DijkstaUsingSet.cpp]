// Given a weighted, undirected and connected graph of V vertices and an adjacency list adj where adj[i] is a list of lists containing two integers where the first integer of each list j denotes there is edge between i and j , second integers corresponds to the weight of that  edge . You are given the source vertex S and You to Find the shortest distance of all the vertex's from the source vertex S. You have to return a list of integers denoting shortest distance between each node and Source vertex S. 
 
 
vector <int> dijkstra(int V, vector<vector<int>> adj[], int S)
    {
        set<pair<int,int>> st;
        vector<int> dist(V,INT_MAX);
        dist[S]=0;
        st.insert({S,0});
        while(!st.empty()){
            auto it = *(st.begin()); // to get the front pair from set
            int node =it.first;
            int dis=it.second;
            st.erase(it);
            for(auto it : adj[node]){
                int adjnode=it[0];
                int edgeWeight=it[1];
                
                if(dist[adjnode] > dis+edgeWeight){
                  
                  if(dist[adjnode] != INT_MAX){
                      st.erase({adjnode,dist[adjnode]});
                  }
                  dist[adjnode] = dis+edgeWeight;
                  st.insert({adjnode,dist[adjnode]})  ; 
                }
            }
        }
        return dist;
    }